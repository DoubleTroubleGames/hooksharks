[gd_scene load_steps=16 format=2]

[ext_resource path="res://menus/mode-select/ModeSelect.gd" type="Script" id=1]
[ext_resource path="res://assets/effects/water/Water.tscn" type="PackedScene" id=2]
[ext_resource path="res://assets/images/effects/WaterDistortion.png" type="Texture" id=3]
[ext_resource path="res://assets/images/effects/noise.png" type="Texture" id=4]
[ext_resource path="res://assets/images/ui/m_deathmatch.png" type="Texture" id=5]
[ext_resource path="res://assets/images/ui/m_deathmatch_o.png" type="Texture" id=6]
[ext_resource path="res://assets/images/ui/m_racingt.png" type="Texture" id=7]
[ext_resource path="res://assets/images/ui/m_racingt_o.png" type="Texture" id=8]
[ext_resource path="res://assets/sound/sfx/menu_selection.wav" type="AudioStream" id=9]
[ext_resource path="res://assets/sound/sfx/menu_confirm.wav" type="AudioStream" id=10]










[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform bool active;
uniform sampler2D noise;
uniform float wave_length : hint_range(0,1);
uniform vec4 wave_color : hint_color;
uniform vec2 wave_scroll_speed;
uniform sampler2D distortion;
uniform float distortion_strength;
uniform float aa_factor;

/*Making outline images on gimp:
	- grow shape by 40 pixel
	- paint it white
	- use filter \"gaussian blur\" with values (100,100)
	- fine adjustments with Smudge Tool if needed
*/
void fragment(){
	vec4 pixel = texture(TEXTURE, UV);
	if (active) {
		if (pixel.a < 1.0 && pixel.a > 0.0){

			vec2 distortMod = (texture(distortion, UV).xy * 2.0 - 1.0) * distortion_strength;
			float noise_x = mod(UV.x + wave_scroll_speed.x*TIME, 1.0) + distortMod.x;
			float noise_y = mod(UV.y + wave_scroll_speed.y*TIME, 1.0) + distortMod.y;
			vec2 noiseUV = vec2(noise_x, noise_y);
			vec4 noisePixel = texture(noise, noiseUV);

			float value = (noisePixel.r + noisePixel.g + noisePixel.g)/3.0;

			float cutoff = 1.0 - smoothstep(1.0 - wave_length, 1.0, pixel.a);

			if (value > cutoff - aa_factor) {
				float alpha = smoothstep(cutoff - aa_factor, cutoff + aa_factor, value);
				COLOR = vec4(wave_color.rgb, wave_color.a * alpha);
			}
			else
				COLOR = vec4(0);
		}else
			COLOR = pixel;
	}else
		COLOR = pixel;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/active = false
shader_param/wave_length = 0.515
shader_param/wave_color = Color( 0.392157, 0.568627, 0.686275, 1 )
shader_param/wave_scroll_speed = Vector2( 0.02, 0.01 )
shader_param/distortion_strength = 0.3
shader_param/aa_factor = 0.04
shader_param/noise = ExtResource( 4 )
shader_param/distortion = ExtResource( 3 )

[sub_resource type="Animation" id=3]
length = 3.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 161, 264 ), Vector2( 161, 240 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rect_rotation")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -2.35661, 3.0 ]
}

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 1 )
shader_param/active = false
shader_param/wave_length = 0.515
shader_param/wave_color = Color( 0.392157, 0.568627, 0.686275, 1 )
shader_param/wave_scroll_speed = Vector2( 0.02, 0.01 )
shader_param/distortion_strength = 0.3
shader_param/aa_factor = 0.04
shader_param/noise = ExtResource( 4 )
shader_param/distortion = ExtResource( 3 )

[sub_resource type="Animation" id=5]
length = 3.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 1015, 235 ), Vector2( 1015, 255 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rect_rotation")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 4.0, 1.0 ]
}

[node name="ModeSelect" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 1 )

[node name="Water" parent="." instance=ExtResource( 2 )]

[node name="ArenaButton" type="TextureButton" parent="."]
material = SubResource( 2 )
margin_left = 161.0
margin_top = 241.301
margin_right = 865.0
margin_bottom = 866.301
rect_rotation = 2.70973
rect_pivot_offset = Vector2( 358.61, 325.188 )
focus_neighbour_right = NodePath("../RacingButton")
disabled = true
texture_normal = ExtResource( 5 )
texture_focused = ExtResource( 6 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="ArenaButton"]
autoplay = "idle"
playback_speed = 0.7
anims/idle = SubResource( 3 )

[node name="RacingButton" type="TextureButton" parent="."]
material = SubResource( 4 )
margin_left = 1015.0
margin_top = 254.664
margin_right = 1719.0
margin_bottom = 879.664
rect_rotation = 1.05035
rect_pivot_offset = Vector2( 352.534, 316.153 )
focus_neighbour_left = NodePath("../ArenaButton")
disabled = true
texture_normal = ExtResource( 7 )
texture_focused = ExtResource( 8 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="RacingButton"]
autoplay = "idle"
playback_speed = 0.6
anims/idle = SubResource( 5 )

[node name="Sounds" type="Node" parent="."]

[node name="SelectSFX" type="AudioStreamPlayer" parent="Sounds"]
stream = ExtResource( 9 )
bus = "SFX"

[node name="ConfirmSFX" type="AudioStreamPlayer" parent="Sounds"]
stream = ExtResource( 10 )
bus = "SFX"

[connection signal="focus_entered" from="ArenaButton" to="." method="_on_ArenaButton_focus_entered"]
[connection signal="focus_exited" from="ArenaButton" to="." method="_on_ArenaButton_focus_exited"]
[connection signal="pressed" from="ArenaButton" to="." method="_on_ArenaButton_pressed"]
[connection signal="focus_entered" from="RacingButton" to="." method="_on_RacingButton_focus_entered"]
[connection signal="focus_exited" from="RacingButton" to="." method="_on_RacingButton_focus_exited"]
[connection signal="pressed" from="RacingButton" to="." method="_on_RacingButton_pressed"]
