[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[ext_resource path="res://assets/WaterDistortion.png" type="Texture" id=1]
[ext_resource path="res://assets/noise.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "                shader_type canvas_item;
render_mode unshaded;

uniform int intensity : hint_range(0,10000);
uniform float precision : hint_range(0,1);
uniform vec4 outline_color : hint_color;
uniform sampler2D noise;
uniform float cutoff_mod;
uniform vec2 wave_scroll_speed;
uniform sampler2D distortion;
uniform float distortion_strength;
uniform float range;
uniform float test : hint_range(0, 1.0);

varying vec2 o;
varying vec2 f;

void vertex()
{
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * float(intensity);
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);

	vec4 regular_color = texture(TEXTURE, regular_uv);
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=.25){
		regular_color = vec4(0.0);
	}

	vec2 ps = TEXTURE_PIXEL_SIZE * float(intensity) * precision;

	vec4 final_color = regular_color;
	float min_dist = 999999.0;
	if (regular_color.a <= 0.0)
	{
		for (int x = -1; x <= 1; x++) {
			for (int y = -1; y <= 1; y++) {
				if (x == 0 && y == 0) continue;
				float m = 1.0 - range;
				vec2 outline_uv = regular_uv + vec2(float(x) * ps.x, float(y) * ps.y);
				//Black magic
				vec2 b_outline_uv = regular_uv + m*vec2(float(x) * ps.x, float(y) * ps.y);
				vec2 t_outline_uv = regular_uv + m*vec2(float(-y) * ps.x, float(x) * ps.y);
				vec2 h_outline_uv = regular_uv + m*vec2(float(y) * ps.x, float(-x) * ps.y);
				
				//Sample here, if we are out of bounds then fail
				vec4 outline_sample = texture(TEXTURE, outline_uv);
				vec4 b_outline_sample = texture(TEXTURE, b_outline_uv);
				vec4 t_outline_sample = texture(TEXTURE, t_outline_uv);
				vec4 h_outline_sample = texture(TEXTURE, h_outline_uv);

				
				if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
					//We aren't a real color
					outline_sample = vec4(0);
				}
				if(((b_outline_uv.x < 0.0 || b_outline_uv.x > 1.0) || (b_outline_uv.y < 0.0 || b_outline_uv.y > 1.0))){
					//We aren't a real color
					b_outline_sample = vec4(0);
					t_outline_sample = vec4(0);
					h_outline_sample = vec4(0);
					
				}

				//Is our sample empty? Is there something nearby?
				if(outline_sample.a > 0.0){
					final_color = outline_color;
					//F*cking black magic
					if (!(b_outline_sample.a > 0.0 || t_outline_sample.a > 0.0 ||  h_outline_sample.a > 0.0) && final_color.b != 0.0) {
						final_color.b = .127;
					}
				}else{
					float dist = distance(outline_uv, regular_uv);
					if (dist < min_dist) min_dist = dist;
				}

			}
		}
	}
	if (final_color.a <= 0.0 && min_dist < test) {
		//final_color = vec4(1.0,0.0,0.0,1.0);
	}
	if (final_color.rg == outline_color.rg) {
		vec2 distortMod = (texture(distortion, UV).xy * 2.0 - 1.0) * distortion_strength;
		float noise_x = mod(UV.x + wave_scroll_speed.x*TIME, 1.0) + distortMod.x;
		float noise_y = mod(UV.y + wave_scroll_speed.y*TIME, 1.0) + distortMod.y;
		vec2 noiseUV = vec2(noise_x, noise_y);
		vec4 noisePixel = texture(noise, noiseUV);

		float value = 3.0*(noisePixel.r + noisePixel.g + noisePixel.g)/3.0;
		
		//Modify value at borders
		float modifier = 1.0;
		if (final_color.b == .127)
			modifier = .7;
		
		final_color.b = outline_color.b;
 		if (value*modifier <= cutoff_mod){
			final_color.a = 0.0;
			
		}
		//if (min_dist < test)
			//final_color.a = 0.0;
	}
	COLOR = final_color;
}"

[resource]
shader = SubResource( 1 )
shader_param/intensity = 1000
shader_param/precision = 0.02
shader_param/outline_color = Color( 0.392157, 0.568627, 0.686275, 1 )
shader_param/cutoff_mod = 1.0
shader_param/wave_scroll_speed = Vector2( 0.02, 0.01 )
shader_param/distortion_strength = 0.4
shader_param/range = 0.5
shader_param/test = 0.044
shader_param/noise = ExtResource( 2 )
shader_param/distortion = ExtResource( 1 )

